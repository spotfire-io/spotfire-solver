
buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.20'
    id("org.jetbrains.kotlin.plugin.serialization") version "1.9.20"
    id "io.spring.dependency-management" version '1.0.6.RELEASE'
    id("io.ktor.plugin") version "2.3.6"
}

group 'io.spotfire'
version '2.0.0'

ext {
    kotlin_version = '1.9.20'
    spek_version = '2.0.2'
    moshi_version = '1.8.0'
    logback_version = '1.4.11'
    ktor_version = '2.3.6'
}

sourceCompatibility = 11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.squareup.moshi:moshi:1.8.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.8.0"
    implementation "com.squareup.okhttp3:okhttp:3.14.1"
    implementation "org.codehaus.plexus:plexus-archiver:2.2"

    implementation "org.optaplanner:optaplanner-core:7.20.0.Final"
    implementation("ch.qos.logback:logback-classic:$logback_version")
    implementation "io.github.cdimascio:java-dotenv:5.0.1"

    implementation "com.amazonaws:aws-lambda-java-core:1.2.0"
    implementation "com.amazonaws:aws-lambda-java-events:2.2.6"
    implementation("io.ktor:ktor-server-core-jvm")
    implementation("io.ktor:ktor-server-netty-jvm")
    implementation("io.ktor:ktor-server-netty:$ktor_version")
    implementation("io.ktor:ktor-server-content-negotiation-jvm")
    implementation("io.ktor:ktor-serialization-kotlinx-json-jvm")

//    implementation "org.jetbrains.kotlin:kotlin-reflect:1.8.21"

    // for assertion
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation "io.jsonwebtoken:jjwt:0.9.1"

    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }

    // spek requires kotlin-reflect, can be omitted if already in the classpath
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

// setup the test task
test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging.showStandardStreams = true
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
}

application {
    mainClass.set("io.spotfire.solver.ApplicationKt")
}
