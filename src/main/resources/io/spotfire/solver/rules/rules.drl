
import io.spotfire.solver.domain.*;
import io.spotfire.solver.domain.PlaylistTrack;
import org.optaplanner.core.api.score.buildin.bendablebigdecimal.BendableBigDecimalScoreHolder
import java.math.BigDecimal;
import java.util.List;

global BendableBigDecimalScoreHolder scoreHolder;

rule "Should avoid playing artist back-to-back"
    when
        $a: Artist()
        RestPlaylistTrack(
            track.artists contains $a,
            previousTrack != null,
            previousTrack.track != null,
            previousTrack.track.artists contains $a
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 2, new BigDecimal(-4));
end

rule "Should avoid playing recent artist"
    when
        $a: Artist()
        $track: RestPlaylistTrack(track.artists contains $a)
        $previous: RestPlaylistTrack(
            previousTrack == $track,
            previousTrack != null,
            previousTrack.track != null,
            previousTrack.track.artists contains $a
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 2, new BigDecimal(-1));
end

rule "Key distance should be kept to a minimum"
    when
       RestPlaylistTrack(
           keyDistance != null,
           keyDistance > 0,
           $kd: keyDistance
       )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, new BigDecimal(-$kd*$kd));
end

rule "Key changes should only occur after same-key transitions"
    when
        $pt0: RestPlaylistTrack(
            keyDistance != null,
            keyDistance > 0,
            previousTrack != null,
            $previousDistance: keyDistance
        )
        RestPlaylistTrack(
            keyDistance != null,
            keyDistance > 0,
            previousTrack == $pt0,
            $currentDistance: keyDistance
        )
    then
        scoreHolder.addSoftConstraintMatch(
            kcontext,
            1,
            new BigDecimal(
                -$previousDistance
            )
        );
end

//rule "Should not play the same artist more than once in five songs"
//    when
//        $a: Artist()
//        $pt: PlaylistTrack()
//
//end

rule "Should change key at least once every five songs"
    when
        $t0: RestPlaylistTrack(keyDistance == 0)
        $t1: RestPlaylistTrack(keyDistance == 0, previousTrack == $t0)
        $t2: RestPlaylistTrack(keyDistance == 0, previousTrack == $t1)
        $t3: RestPlaylistTrack(keyDistance == 0, previousTrack == $t3)
        $t4: RestPlaylistTrack(keyDistance == 0, previousTrack == $t3)
     then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, new BigDecimal(-2));
end

rule "All next tracks should have previous tracks"
    when
        RestPlaylistTrack(previousTrack == null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, new BigDecimal(-1));
end

rule "Should play each song only once"
    when
        RestPlaylistTrack($t: track, previousTrack != null, $p: previousTrack)
        RestPlaylistTrack(track != $t, previousTrack == $p)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, new BigDecimal(-1));
end


rule "First playlist track is at position 1"
    when
        $fpt: FirstPlaylistTrack()
        not TrackPosition(
            track == $fpt
        )
    then
        insert(new TrackPosition($fpt, 1));
end


rule "Tracks should have a track position"
    when
        $t: RestPlaylistTrack(
            previousTrack != null,
            $pt: previousTrack
        )

        $tp: TrackPosition(
            track == $pt,
            $prevPos: position
        )

    then
        insertLogical(new TrackPosition($t, $prevPos + 1));
end

rule "Track key repeats should be avoided"
    when
        $tp: TrackPosition(
            $p: position
        )

        $window: Integer() from accumulate(
                TrackPosition(
                    position < $p,
                    $t: track
                ),
                sum($t.getKeyDistance())
        )
    then
        System.out.println($window) ;

end

